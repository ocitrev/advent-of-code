{
	// Place your advent-of-code workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Advent Of Code Main": {
		"scope": "cpp,hpp",
		"prefix": "aoc",
		"body": [
			"#include \"day${1:${CURRENT_DATE/^0?(.+)$/$1/}}.hpp\"",
			"#include \"../common.hpp\"",
			"",
			"static int Part1()",
			"{",
			"    return 0;",
			"}",
			"",
			"static int Part2()",
			"{",
			"    return 0;",
			"}",
			"",
			"int main()",
			"{",
			"    // https://adventofcode.com/$2/day/$1",
			"    fmt::print(\"Day $1, ${2:$CURRENT_YEAR}: $0\\n\");",
			"",
			"    auto const part1 = Part1();",
			"    fmt::print(\"  Part 1: {}\\n\", part1);",
			"    // Assert( == part1);",
			"",
			"    auto const part2 = Part2();",
			"    fmt::print(\"  Part 2: {}\\n\", part2);",
			"    // Assert( == part2);",
			"}"
		]
	},
	"Namespace": {
		"scope": "cpp,hpp",
		"prefix": "ns",
		"body": [
			"namespace ${1:input}",
			"{",
			"    $0",
			"}",
		]
	},
	"string_view": {
		"scope": "cpp,hpp",
		"prefix": "sv",
		"body": "std::string_view"
	}
}
